{"version":3,"file":"static/js/736.448d4bc4.chunk.js","mappings":"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","sources":["API/fetchMovie.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nimport { toast } from 'react-toastify';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'dd2eacab57962d131eb2537d52aeafc3';\n\nasync function getFilmByKeyWord(search) {\n  try {\n    const url = `${BASE_URL}search/movie?api_key=${API_KEY}&language=en&page=1&include_adult=false&query=${search}`;\n    const response = await axios.get(url);\n    return await response.data;\n  } catch (error) {\n    toast.error('Oops, an error occurred');\n  }\n}\nexport { getFilmByKeyWord };\nasync function getPopular() {\n  try {\n    const url = `${BASE_URL}trending/all/day?api_key=${API_KEY}&language=en`;\n    const response = await axios.get(url);\n    return await response.data;\n  } catch (error) {\n    toast.error('Oops, an error occurred');\n  }\n}\n\nexport { getPopular };\n\nasync function getFilmDetails(id) {\n  try {\n    const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}`;\n    const response = await axios.get(url);\n    return await response.data;\n  } catch (error) {\n    toast.error('Oops, an error occurred');\n  }\n}\nexport { getFilmDetails };\n\nasync function getFilmCast(id) {\n  try {\n    const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n    const response = await axios.get(url);\n    return await response.data;\n  } catch (error) {\n    toast.error('Oops, an error occurred');\n  }\n}\nexport { getFilmCast };\n\nasync function getFilmReview(id) {\n  try {\n    const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n    const response = await fetch(url);\n    return response.json();\n  } catch (error) {\n    toast.error('Oops, an error occurred');\n  }\n}\nexport { getFilmReview };\n","import styled from 'styled-components';\n\nexport const StyledUL = styled.ul`\n  list-style-type: none;\n  margin-left: 60px;\n  padding: 0;\n`;\n\nexport const StyledLI = styled.li`\n  display: flex;\n  align-items: center;\n  margin-bottom: 16px;\n  gap: 10px;\n`;\n\nexport const StyledImg = styled.img`\n  width: 100px;\n  height: auto;\n  margin-right: 16px;\n`;\n\nexport const StyledChapter = styled.p`\n  margin: 0;\n  font-weight: bold;\n  margin-bottom: 5px;\n`;\n\nexport const StyledAuthor = styled.p`\n  margin: 0;\n  font-weight: bold;\n`;\n\nexport const StyledSpan = styled.span`\n  font-weight: 400;\n`;\n","import { getFilmCast } from 'API/fetchMovie';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport noPhoto from 'img/photoNotAvailable.jpg';\nimport {\n  StyledUL,\n  StyledLI,\n  StyledImg,\n  StyledChapter,\n  StyledAuthor,\n  StyledSpan,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castArray, setCastArray] = useState([]);\n\n  useEffect(() => {\n    getFilmCast(movieId).then(({ cast }) => setCastArray(cast));\n  }, [movieId]);\n\n  return (\n    <StyledUL>\n      {castArray &&\n        castArray.map(({ original_name, character, profile_path, id }) => (\n          <StyledLI key={id}>\n            {profile_path !== null ? (\n              <StyledImg\n                src={`https://themoviedb.org/t/p/w500${profile_path}`}\n                alt={original_name}\n              />\n            ) : (\n              <StyledImg src={noPhoto} alt=\"Without photo\" />\n            )}\n            <div>\n              <StyledChapter>\n                Chapter: <StyledSpan>{character}</StyledSpan>\n              </StyledChapter>\n              <StyledAuthor>\n                Author: <StyledSpan>{original_name}</StyledSpan>\n              </StyledAuthor>\n            </div>\n          </StyledLI>\n        ))}\n    </StyledUL>\n  );\n};\n\nexport default Cast;\n"],"names":["BASE_URL","API_KEY","getFilmByKeyWord","search","url","axios","response","data","toast","getPopular","getFilmDetails","id","getFilmCast","getFilmReview","fetch","json","StyledUL","styled","StyledLI","StyledImg","StyledChapter","StyledAuthor","StyledSpan","movieId","useParams","useState","castArray","setCastArray","useEffect","then","cast","map","original_name","character","profile_path","src","alt","noPhoto"],"sourceRoot":""}